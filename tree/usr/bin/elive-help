#!/bin/bash
source /usr/lib/elive-tools/functions
# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    # do not exit, we don't need to
    true
    #el_error "$(basename $0) already running"
    #zenity --error --text="Elive Help already running"
    #exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

main(){
    # pre {{{
    local arg


    # }}}
    # args {{{
    if [[ -n "$1" ]] ; then
        for arg in "$@"
        do
            case "$arg" in
                --hotkeys)
                    is_hotkeys_mode=1
                    ;;
                --userguide)
                    is_guide_mode=1
                    ;;
                --all)
                    is_hotkeys_mode=1
                    is_guide_mode=1
                    ;;
            esac
        done
    else
        is_hotkeys_mode=1
        is_guide_mode=1
    fi
    # - args }}}

    # hotkeys
    if ((is_hotkeys_mode)) ; then
        evince -w "/usr/share/elive-help/hotkeys/en/hotkeys.pdf"
    fi

    # guide
    if ((is_guide_mode)) ; then
        zenity --warning --text="Guide is not writed yet, please donate to Elive to support this project and finish the User Guide"
    fi

    # check for possible updates
    if el_package_newer_check "elive-help" ; then
        el_package_update_last_version "elive-help"
        zenity --info --text="Elive Help has been updated to the last version"
    fi

}

#
#  MAIN
#
main "$@"



# vim: set foldmethod=marker :
